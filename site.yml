---
- name: Check if VM already exists
  hosts: all
  tasks: 
    - name: Check VM path
      stat: path='{{ vm_safe_dst_full_path }}'
      register: vm_exists
      changed_when: False
    - name: Fail if VM path exists
      fail: msg="VM already exists.  Please set vm_overwrite variable to any value to overwrite the existing VM"
      when: (vm_exists.stat.isdir is defined) and (vm_overwrite is not defined)
    - name: Get VMX path if existing VM is running
      shell: "'{{ vmrun_path }}' list | grep -F '{{ vm_safe_dst_full_path }}' || true"
      register: vmx_path
      when: vm_exists.stat.isdir is defined
      changed_when: False
    - name: Stop VM if it is running
      shell: "'{{ vmrun_path }}' stop '{{ vmx_path.stdout }}'"
      when: vmx_path is defined and vmx_path.stdout != ""
    - name: Remove existing VM path
      file: path='{{ vm_safe_dst_full_path }}' state=absent
    - name: Create VM path
      file: path='{{ vm_safe_dst_full_path }}' state=directory

- name: Verify ovftool is installed
  hosts: all
  tasks:
    - name: Check for ovftool
      shell: pkgutil --pkgs | awk '/com.vmware.ovftool.application/'
      register: pkgutil_ovftool
      changed_when: False
    - name: Fail if VMWare OVF Tools are not installed
      fail: msg="VMWare OVF Tools are required.  Please install and retry."
      when: 'not {{ pkgutil_ovftool.stdout | match("com.vmware.ovftool.application") }}'
    - name: Get ovftool path
      shell: pkgutil --files com.vmware.ovftool.application | grep -FE 'ovftool$'
      register: ovftool_path
      changed_when: false

- name: Extract OVA
  hosts: all
  tasks:
    - name: Extract OVA using ovftool
      command: "'/{{ ovftool_path.stdout }}' '{{ ova_source }}' '{{ vm_safe_dst_full_path }}/{{ vm_name }}.vmx'"
    - name: Configure Ethernet0 as Share with my Mac
      lineinfile: >
        dest='{{ vm_safe_dst_full_path }}/{{ vm_name }}.vmx'
        regexp='^ethernet0.connectionType ='
        line='ethernet0.connectionType = "nat"'

- name: Configure TFTP
  hosts: all
  tasks: 
    - name: Deploy TFTP plist
      template: 
        src: "templates/tftp.plist.j2" 
        dest: "{{ tftp_plist }}"
        mode: 0644
      become: yes
    - name: Ensure TFTP path exists
      file: 
        path: "{{ tftp_path }}"
        state: directory
        mode: 0777
    - name: Deploy WLC file
      template:
        src: "templates/ciscowlc.cfg.j2"
        dest: "{{ tftp_path }}/ciscowlc.cfg"
    - name: Check if TFTP daemon is running
      shell: launchctl list | awk /com.apple.tftp/
      become: yes
      register: tftp_daemon_status
      changed_when: False
    - name: Stop TFTP daemon
      command: launchctl unload {{ tftp_plist }}
      become: yes
      when: tftp_daemon_status.stdout != ""
    - name: Start TFTP daemon
      command: launchctl load {{ tftp_plist }}
      become: yes

- name: Configure VMWare DHCP
  hosts: all
  tasks:
    - name: Get vmnet8 IP address
      shell: ifconfig vmnet8 | awk '/inet/{print $2}'
      register: vmnet8_ip_address
      changed_when: False
    - name: Add next-server parameter to vmnet8 DHCP configuration
      lineinfile: >
        dest="/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf"
        line="next-server {{ vmnet8_ip_address.stdout }};"
        insertbefore=BOF
      become: yes
    - name: Stop VMWare networking
      command: '"/Applications/VMware Fusion.app/Contents/Library/vmnet-cli" --stop'
      become: yes
    - name: Start VMWare networking
      command: '"/Applications/VMware Fusion.app/Contents/Library/vmnet-cli" --start'
      become: yes

- name: Start WLC
  hosts: all
  tasks:
    - name: Start virtual machine
      command: "'{{ vmrun_path }}' start '{{ vm_safe_dst_full_path }}/{{ vm_name }}.vmx'"
    - name: Wait for WLC to provision
      local_action: wait_for host='{{ wlc_mgmt_ip_address }}' port=22 delay=10 timeout=600
      sudo: false

- name: Cleanup
  hosts: all
  tasks:
    - name: Remove next-server parameter from vmnet8 DHCP configuration
      lineinfile: >
        dest="/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf"
        line="next-server {{ vmnet8_ip_address.stdout }};"
        state=absent
      become: yes
    - name: Stop VMWare networking
      command: '"/Applications/VMware Fusion.app/Contents/Library/vmnet-cli" --stop'
      become: yes
    - name: Start VMWare networking
      command: '"/Applications/VMware Fusion.app/Contents/Library/vmnet-cli" --start'
      become: yes
    - name: Stop TFTP daemon if it was not previously running
      command: launchctl unload {{ tftp_plist }}
      become: yes
      when: tftp_daemon_status.stdout == ""
